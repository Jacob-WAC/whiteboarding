{"version":3,"sources":["components/canvas.module.css","components/Chat.js","components/Canvas.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Chat","props","message","setMessage","messages","setMessages","useState","io","socket","useEffect","console","log","on","msg","prevmsg","disconnect","className","map","msgs","i","onSubmit","e","preventDefault","emit","type","onChange","target","value","Canvas","data","offsetX","offsetY","contextRef","current","beginPath","moveTo","setIsDrawing","lineTo","stroke","closePath","canvas","canvasRef","getContext","clearRect","width","height","useRef","canvasDiv","isDrawing","window","innerWidth","innerHeight","context","line","strokeStyle","lineWidth","ref","onMouseDown","nativeEvent","onMouseUp","onMouseMove","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b1e2c76c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvasDiv\":\"canvas_canvasDiv__1iPpr\"};","import React, { useState, useEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\nfunction Chat(props) {\r\n    const { message, setMessage } = props;\r\n    const { messages, setMessages } = props;\r\n    const [socket] = useState(() => io(\":8000\"));\r\n\r\n    const onSubmitHandler = (e) => {\r\n        e.preventDefault();\r\n        socket.emit(\"message\", message);\r\n        setMessage(\"\");\r\n    };\r\n\r\n    // socket stuff ########################\r\n    useEffect(() => {\r\n        console.log(\"hewwo!!!\");\r\n        socket.on(\"send msg\", (msg) => {\r\n            setMessages((prevmsg) => {\r\n                return [...prevmsg, msg];\r\n            });\r\n        });\r\n        return () => socket.disconnect(true);\r\n    }, [socket]);\r\n    // ###############################\r\n\r\n    return (\r\n        <div className=\"border \">\r\n            <div className=\"\">\r\n                <h1>Class Chat</h1>\r\n            </div>\r\n            <div className=\"\">\r\n                {messages.map((msgs, i) => (\r\n                    <p className=\"m-3\" key={i}>\r\n                        {msgs}\r\n                    </p>\r\n                ))}\r\n            </div>\r\n            <div>\r\n                <form\r\n                    onSubmit={onSubmitHandler}\r\n                    className=\"d-flex justify-content-center\"\r\n                >\r\n                    <div className=\"form-group \">\r\n                        <input\r\n                            className=\"form-control \"\r\n                            type=\"text\"\r\n                            onChange={(e) => setMessage(e.target.value)}\r\n                            value={message}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group \">\r\n                        <input\r\n                            className=\"btn btn-success ms-3\"\r\n                            value=\"Send Message\"\r\n                            type=\"submit\"\r\n                        />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport styles from \"./canvas.module.css\";\r\nfunction Canvas(props) {\r\n    const [socket] = useState(() => io(\":8000\"));\r\n\r\n    // socket stuff ########################\r\n    useEffect(() => {\r\n        console.log(\"hewwo!!!\");\r\n        socket.on(\"startDraw\", (data) => {\r\n            console.log(\"start drawing!\");\r\n            var offsetX = data[0];\r\n            var offsetY = data[1];\r\n            contextRef.current.beginPath();\r\n            contextRef.current.moveTo(offsetX, offsetY);\r\n            setIsDrawing(true);\r\n        });\r\n        socket.on(\"drawing\", (data) => {\r\n            console.log(\"drawing\");\r\n\r\n            var offsetX = data[0];\r\n            var offsetY = data[1];\r\n\r\n            contextRef.current.lineTo(offsetX, offsetY);\r\n            contextRef.current.stroke();\r\n        });\r\n        socket.on(\"endDraw\", (data) => {\r\n            console.log(\"end drawing\");\r\n            contextRef.current.closePath();\r\n            setIsDrawing(false);\r\n        });\r\n        socket.on(\"clear\", (data) => {\r\n            const canvas = canvasRef.current;\r\n            const context = canvas.getContext(\"2d\");\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n        });\r\n        return () => socket.disconnect(true);\r\n    }, [socket]);\r\n    // ###############################\r\n\r\n    const canvasRef = useRef(null);\r\n    const contextRef = useRef(null);\r\n    const canvasDiv = useRef(null);\r\n\r\n    const [isDrawing, setIsDrawing] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        canvas.width = window.innerWidth - 500;\r\n        canvas.height = window.innerHeight - 200;\r\n\r\n        const context = canvas.getContext(\"2d\");\r\n\r\n        context.line = \"round\";\r\n        context.strokeStyle = \"black\";\r\n        context.lineWidth = 5;\r\n        contextRef.current = context;\r\n    }, []);\r\n\r\n    const startDrawing = ({ nativeEvent }) => {\r\n        const { offsetX, offsetY } = nativeEvent;\r\n        contextRef.current.beginPath();\r\n        contextRef.current.moveTo(offsetX, offsetY);\r\n        setIsDrawing(true);\r\n        socket.emit(\"startDraw\", [offsetX, offsetY, true]);\r\n    };\r\n\r\n    const finishDrawing = () => {\r\n        contextRef.current.closePath();\r\n        setIsDrawing(false);\r\n        socket.emit(\"endDraw\", false);\r\n    };\r\n\r\n    const draw = ({ nativeEvent }) => {\r\n        if (!isDrawing) {\r\n            return;\r\n        }\r\n\r\n        const { offsetX, offsetY } = nativeEvent;\r\n        contextRef.current.lineTo(offsetX, offsetY);\r\n        contextRef.current.stroke();\r\n        socket.emit(\"draw\", [offsetX, offsetY]);\r\n    };\r\n\r\n    const clearCanvas = () => {\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext(\"2d\");\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        socket.emit(\"clear\", \"clear it out\");\r\n    };\r\n\r\n    return (\r\n        <div ref={canvasDiv} className=\" d-flex flex-column \">\r\n            <canvas\r\n                className=\"mt-3 {styles.canvas}\"\r\n                onMouseDown={startDrawing}\r\n                onMouseUp={finishDrawing}\r\n                onMouseMove={draw}\r\n                ref={canvasRef}\r\n            ></canvas>\r\n            <button\r\n                className=\"btn btn-success w-25 mb-3 mt-2\"\r\n                onClick={clearCanvas}\r\n            >\r\n                Clear\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Canvas;\r\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\nimport Chat from \"./components/Chat\";\nimport Canvas from \"./components/Canvas\";\n\nfunction App(props) {\n    const [messages, setMessages] = useState([]);\n    const [message, setMessage] = useState(\"\");\n\n    return (\n        <div className=\"App  container-fluid d-flex justify-content-center gap-5\">\n            <Canvas />\n            <Chat\n                message={message}\n                setMessage={setMessage}\n                messages={messages}\n                setMessages={setMessages}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}